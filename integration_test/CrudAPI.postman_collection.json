{
	"info": {
		"_postman_id": "ae48ebbf-6590-4bea-9654-7d39eec9bcbb",
		"name": "Crud API",
		"description": "Collection for testing Transaction API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "43700619"
	},
	"item": [
		{
			"name": "Create User 1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateCPF() {\r",
							"    function randomDigit() {\r",
							"        return Math.floor(Math.random() * 9);\r",
							"    }\r",
							"\r",
							"    let n = [];\r",
							"    for (let i = 0; i < 9; i++) n.push(randomDigit());\r",
							"\r",
							"    function calcChecker(digits) {\r",
							"        let sum = 0;\r",
							"        for (let i = 0; i < digits.length; i++) {\r",
							"            sum += digits[i] * ((digits.length + 1) - i);\r",
							"        }\r",
							"        let result = 11 - (sum % 11);\r",
							"        return result > 9 ? 0 : result;\r",
							"    }\r",
							"\r",
							"    n.push(calcChecker(n));\r",
							"    n.push(calcChecker(n));\r",
							"\r",
							"    return n.join('');\r",
							"}\r",
							"\r",
							"function generateRandomString(length) {\r",
							"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"user1_name\", generateRandomString(10));\r",
							"pm.environment.set(\"user1_Cpf\", generateCPF());\r",
							"pm.environment.set(\"user1_email\", pm.variables.replaceIn(\"{{$randomEmail}}\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain user document\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"document\");\r",
							"});\r",
							"\r",
							"pm.test(\"User email is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"    pm.expect(jsonData.email).to.match(emailRegex);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{user1_name}}\",\n  \"password\": \"user123!@#\",\n  \"email\": \"{{user1_email}}\",\n  \"document\": \"{{user1_Cpf}}\",\n  \"moneyBalance\": 1000\n}"
				},
				"url": "http://localhost:8080/users/create"
			},
			"response": []
		},
		{
			"name": "Create User 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateCPF() {\r",
							"    function randomDigit() {\r",
							"        return Math.floor(Math.random() * 9);\r",
							"    }\r",
							"\r",
							"    let n = [];\r",
							"    for (let i = 0; i < 9; i++) n.push(randomDigit());\r",
							"\r",
							"    function calcChecker(digits) {\r",
							"        let sum = 0;\r",
							"        for (let i = 0; i < digits.length; i++) {\r",
							"            sum += digits[i] * ((digits.length + 1) - i);\r",
							"        }\r",
							"        let result = 11 - (sum % 11);\r",
							"        return result > 9 ? 0 : result;\r",
							"    }\r",
							"\r",
							"    n.push(calcChecker(n));\r",
							"    n.push(calcChecker(n));\r",
							"\r",
							"    return n.join('');\r",
							"}\r",
							"\r",
							"function generateRandomString(length) {\r",
							"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
							"    let result = '';\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"user2_name\", generateRandomString(10));\r",
							"pm.environment.set(\"user2_Cpf\", generateCPF());\r",
							"pm.environment.set(\"user2_email\", pm.variables.replaceIn(\"{{$randomEmail}}\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain user document\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"document\");\r",
							"});\r",
							"\r",
							"pm.test(\"User email is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"    pm.expect(jsonData.email).to.match(emailRegex);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{user2_name}}\",\n  \"password\": \"user123!@#\",\n  \"email\": \"{{user2_email}}\",\n  \"document\": \"{{user2_Cpf}}\",\n  \"moneyBalance\": 1000\n}"
				},
				"url": "http://localhost:8080/users/create"
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain user token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"    pm.environment.set(\"authToken\", jsonData.token);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{user1_name}}\",\n  \"password\": \"user123!@#\"\n}"
				},
				"url": "http://localhost:8080/login"
			},
			"response": []
		},
		{
			"name": "Search Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain pageable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"pageable\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{authToken}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/users/search"
			},
			"response": []
		},
		{
			"name": "Create Transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 400\", function () {\r",
							"   pm.expect(pm.response.code === 201 || pm.response.code === 400).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{authToken}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"value\": 10,\n  \"payee\": \"{{user1_email}}\",\n  \"payer\": \"{{user2_email}}\"\n}"
				},
				"url": "http://localhost:8080/transactions/send"
			},
			"response": []
		},
		{
			"name": "Create Transaction with Invalid Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"   pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain errors\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"errors\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors.value).to.eql(\"Negative or zero values are not allowed\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{authToken}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"value\": -1,\n  \"payee\": \"{{user1_email}}\",\n  \"payer\": \"{{user2_email}}\"\n}"
				},
				"url": "http://localhost:8080/transactions/send"
			},
			"response": []
		},
		{
			"name": "Create Transaction with Null Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"   pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain errors\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"errors\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors.value).to.eql(\"The value cannot be null\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{authToken}}"
					}
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"value\": null,\n  \"payee\": \"{{user1_email}}\",\n  \"payer\": \"{{user2_email}}\"\n}"
				},
				"url": "http://localhost:8080/transactions/send"
			},
			"response": []
		},
		{
			"name": "Delete User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{authToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users?param={{user1_Cpf}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users"
					],
					"query": [
						{
							"key": "param",
							"value": "{{user1_Cpf}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should contain status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"status\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"Success\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{authToken}}"
					}
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users?param={{user2_Cpf}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users"
					],
					"query": [
						{
							"key": "param",
							"value": "{{user2_Cpf}}"
						}
					]
				}
			},
			"response": []
		}
	]
}